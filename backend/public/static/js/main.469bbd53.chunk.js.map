{"version":3,"sources":["Components/Buttons.js","Components/Input.js","Components/ClearButton.js","chatMessage.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","props","className","val","children","isNaN","onClick","handleClick","Input","input","ClearButton","handleClear","name","message","HOST","window","location","origin","replace","rws","WebSocket","App","addToInput","setState","state","addMessage","console","log","elements","messages1","messages","JSON","parse","handleEqual","messageString","message1","math","data","stringify","send","componentDidMount","username","onopen","onmessage","evt","forEach","element","onclose","this","action","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","map","index","key","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.469bbd53.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Buttons.css'\r\n\r\nconst isOperator = val => {\r\n    // Return True if it is a number\r\n    // and not an operator\r\n    return !isNaN(val) || val === \".\" || val === \"=\";\r\n}\r\n\r\nexport const Buttons = props => (\r\n    <div className={`button-wrapper ${\r\n        isOperator(props.children) ? null: \"operator\"\r\n    }`} onClick={() => props.handleClick(props.children)}>\r\n        {props.children}\r\n    </div>\r\n)","import React from 'react';\r\nimport './Input.css';\r\n\r\nexport const Input = (props) => (\r\n    <div className=\"input\">{props.input}</div>\r\n);","import React from 'react';\r\nimport './ClearButton.css';\r\n\r\nexport const ClearButton = (props) => (\r\n    <div className=\"clear-btn\" onClick={props.handleClear}>\r\n        {props.children}\r\n    </div>\r\n);","import React from 'react';\r\nimport './App.css';\r\n   \r\nexport default ({ name, message }) =>\r\n<div className=\"messages\">\r\n  <p>\r\n    <strong>{name}: </strong> <em>{message}</em>\r\n  </p>\r\n</div>","import React from 'react';\nimport './App.css';\nimport {Buttons} from './Components/Buttons';\nimport {Input} from './Components/Input';\nimport {ClearButton} from './Components/ClearButton';\nimport ChatMessage from './chatMessage';\nimport * as math from 'mathjs';\n\n\nvar HOST = window.location.origin.replace(/^http/, 'wss')\nlet rws = new WebSocket(HOST);\n\nclass App extends React.Component {\n  constructor(props)  {\n    super(props);\n    this.state = {\n      username: \"\",\n      input: \"\",\n      messages1: [],\n      messages: [],\n      elements: [],\n    };\n  }\n  componentDidMount() {\n    rws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected')\n    }\n\n    rws.onmessage = evt => {\n      // on receiving a message, add it to the list of messages\n      console.log(JSON.parse(evt.data))\n      const val = JSON.parse(evt.data)\n      val.forEach(element => this.addMessage(element));\n    }\n\n    rws.onclose = () => {\n      console.log('disconnected')\n      // automatically try to reconnect on connection loss\n      this.setState({\n        rws: new WebSocket(HOST)\n      })\n    }\n  }\n\n  addToInput = val => {\n    this.setState({input: this.state.input + val});\n  }\n\n  addMessage = val => {\n    console.log(this.state.elements);\n    this.setState(\n      {\n        messages1: [val, ...this.state.messages],\n        elements: [JSON.parse(val), ...this.state.elements]\n      }\n    );\n  }\n\n  handleEqual = messageString => {\n    let message1 = this.state.input + ' = ' + math.evaluate(this.state.input)\n    const data = { name: this.state.name, message: message1 }\n    console.log(\"Handle Equal: \",JSON.stringify(data))\n    rws.send(JSON.stringify(data))\n    this.componentDidMount()\n    this.setState(\n      { \n        input: message1,\n        messages:  [data, ...this.state.messages],\n        messages1:  [data, ...this.state.messages1],\n      }\n    );  \n  }\n\n  render(){\n    return(\n      <div className=\"split\">\n        <div className = \"right\">\n          <div className=\"calc-wrapper\">\n            <Input input={this.state.input}></Input>\n            <div className=\"row\">\n              <Buttons handleClick={this.addToInput}>7</Buttons>\n              <Buttons handleClick={this.addToInput}>8</Buttons>\n              <Buttons handleClick={this.addToInput}>9</Buttons>\n              <Buttons handleClick={this.addToInput}>/</Buttons>\n            </div>\n            <div className=\"row\">\n              <Buttons handleClick={this.addToInput}>4</Buttons>\n              <Buttons handleClick={this.addToInput}>5</Buttons>\n              <Buttons handleClick={this.addToInput}>6</Buttons>\n              <Buttons handleClick={this.addToInput}>*</Buttons>\n            </div>\n            <div className=\"row\">\n              <Buttons handleClick={this.addToInput}>1</Buttons>\n              <Buttons handleClick={this.addToInput}>2</Buttons>\n              <Buttons handleClick={this.addToInput}>3</Buttons>\n              <Buttons handleClick={this.addToInput}>+</Buttons>\n            </div>\n            <div className=\"row\">\n              <Buttons handleClick={this.addToInput}>.</Buttons>\n              <Buttons handleClick={this.addToInput}>0</Buttons>\n              <Buttons handleClick={() => this.handleEqual()}>=</Buttons>\n              <Buttons handleClick={this.addToInput}>-</Buttons>\n            </div>\n            <div className=\"row\">\n              <ClearButton handleClear={() => this.setState({input: \"\"})}>Clear</ClearButton>\n            </div>\n          </div>\n        </div>\n        \n        <div className = \"left\">\n          <div>\n          <h1> Welcome {this.state.name}</h1>\n          <form action = \".\" \n                onSubmit={event => {\n                event.preventDefault()\n                this.setState({ name: '' })\n                }}>\n                <label htmlFor=\"name\">\n                  <input\n                    type=\"text\"\n                    id={'name'}\n                    placeholder={'Enter your name...'}\n                    value={this.state.name}\n                    onChange={event => this.setState({ name: event.target.value })\n                  }\n                  />\n                </label>\n          </form>\n          </div>\n            {console.log(\"Console Log: \", this.state.elements)}\n            {this.state.elements.map((message, index) => \n              <ChatMessage\n              key={index}\n              message = {message.message}\n              name = {message.name} />,\n            )}\n            {}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}